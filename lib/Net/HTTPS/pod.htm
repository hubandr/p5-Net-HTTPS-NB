<?xml version="1.0" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>Net::HTTPS::NB - Non-blocking HTTPS client</title>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<link rev="made" href="mailto:root@localhost" />
</head>

<body style="background-color: white">


<!-- INDEX BEGIN -->
<div name="index">
<p><a name="__index__"></a></p>

<ul>

	<li><a href="#name">NAME</a></li>
	<li><a href="#synopsis">SYNOPSIS</a></li>
	<li><a href="#description">DESCRIPTION</a></li>
	<li><a href="#package_constants">PACKAGE CONSTANTS</a></li>
	<li><a href="#package_variables">PACKAGE VARIABLES</a></li>
	<li><a href="#methods">METHODS</a></li>
	<ul>

		<li><a href="#new__cfg_"><code>new(%cfg)</code></a></li>
		<li><a href="#connected">connected</a></li>
		<li><a href="#blocking__flag_"><code>blocking($flag)</code></a></li>
	</ul>

	<li><a href="#see_also">SEE ALSO</a></li>
	<li><a href="#copyright">COPYRIGHT</a></li>
</ul>

<hr name="index" />
</div>
<!-- INDEX END -->

<p>
</p>
<h1><a name="name">NAME</a></h1>
<p>Net::HTTPS::NB - Non-blocking HTTPS client</p>
<p>
</p>
<hr />
<h1><a name="synopsis">SYNOPSIS</a></h1>
<dl>
<dt><strong><a name="example_from_net_http_nb" class="item">Example from <a href="/Net/HTTP/NB.html">the Net::HTTP::NB manpage</a></a></strong></dt>

<dd>
<pre>
        use Net::HTTPS::NB;
        use IO::Select;
        use strict;</pre>
<pre>
        my $s = Net::HTTPS::NB-&gt;new(Host =&gt; &quot;pause.perl.org&quot;) || die $@;
        $s-&gt;write_request(GET =&gt; &quot;/&quot;);</pre>
<pre>
        my $sel = IO::Select-&gt;new($s);</pre>
<pre>
        READ_HEADER: {
                die &quot;Header timeout&quot; unless $sel-&gt;can_read(10);
                my($code, $mess, %h) = $s-&gt;read_response_headers;
                redo READ_HEADER unless $code;
        }</pre>
<pre>
        while (1) {
                die &quot;Body timeout&quot; unless $sel-&gt;can_read(10);
                my $buf;
                my $n = $s-&gt;read_entity_body($buf, 1024);
                last unless $n;
                print $buf;
        }</pre>
</dd>
<dt><strong><a name="example_of_non_blocking_connect" class="item">Example of non-blocking connect</a></strong></dt>

<dd>
<pre>
        use strict;
        use Net::HTTPS::NB;
        use IO::Select;</pre>
<pre>
        my $sock = Net::HTTPS::NB-&gt;new(Host =&gt; 'encrypted.google.com', Blocking =&gt; 0);
        my $sele = IO::Select-&gt;new($sock);</pre>
<pre>
        until ($sock-&gt;connected) {
                if ($HTTPS_ERROR == HTTPS_WANT_READ) {
                        $sele-&gt;can_read();
                }
                elsif($HTTPS_ERROR == HTTPS_WANT_WRITE) {
                        $sele-&gt;can_write();
                }
                else {
                        die 'Unknown error: ', $HTTPS_ERROR;
                }
        }</pre>
</dd>
</dl>
<p>
</p>
<hr />
<h1><a name="description">DESCRIPTION</a></h1>
<p>Same interface as Net::HTTPS but it will never try multiple reads when the
<a href="#read_response_headers"><code>read_response_headers()</code></a> or <a href="#read_entity_body"><code>read_entity_body()</code></a> methods are invoked. In addition
allows non-blocking connect.</p>
<dl>
<dt><strong><a name="read_response_headers" class="item">If <code>read_response_headers()</code> did not see enough data to complete the headers an empty list is returned.</a></strong></dt>

<dt><strong><a name="read_entity_body" class="item">If <code>read_entity_body()</code> did not see new entity data in its read the value -1 is returned.</a></strong></dt>

</dl>
<p>
</p>
<hr />
<h1><a name="package_constants">PACKAGE CONSTANTS</a></h1>
<p>Imported by default</p>
<pre>
        HTTPS_WANT_READ
        HTTPS_WANT_WRITE</pre>
<p>
</p>
<hr />
<h1><a name="package_variables">PACKAGE VARIABLES</a></h1>
<p>Imported by default</p>
<pre>
        $HTTPS_ERROR</pre>
<p>
</p>
<hr />
<h1><a name="methods">METHODS</a></h1>
<p>
</p>
<h2><a name="new__cfg_"><code>new(%cfg)</code></a></h2>
<p>Same as Net::HTTPS::new, but in addition allows `Blocking' parameter. By setting
this parameter to 0 you can perform non-blocking connect. See <code>connected()</code> to
determine when connection completed.</p>
<p>
</p>
<h2><a name="connected">connected</a></h2>
<p>Returns true value when connection completed (https handshake done). Otherwise
returns false. In this case you can check $HTTPS_ERROR to determine what handshake
need for, read or write. $HTTPS_ERROR could be HTTPS_NEED_READ or HTTPS_NEED_WRITE
respectively. See <a href="#synopsis">SYNOPSIS</a>.</p>
<p>
</p>
<h2><a name="blocking__flag_"><code>blocking($flag)</code></a></h2>
<p>As opposed to Net::HTTPS where blocking method consciously broken you
can set socket blocking. For example you can return socket to blocking state
after non-blocking connect.</p>
<p>
</p>
<hr />
<h1><a name="see_also">SEE ALSO</a></h1>
<p><a href="/Net/HTTP.html">the Net::HTTP manpage</a>, <a href="/Net/HTTP/NB.html">the Net::HTTP::NB manpage</a></p>
<p>
</p>
<hr />
<h1><a name="copyright">COPYRIGHT</a></h1>
<p>Copyright 2011 Oleg G &lt;<a href="mailto:oleg@cpan.org">oleg@cpan.org</a>&gt;.</p>
<p>This library is free software; you can redistribute it and/or
modify it under the same terms as Perl itself.</p>

</body>

</html>
